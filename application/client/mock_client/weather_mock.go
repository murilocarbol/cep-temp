// Code generated by MockGen. DO NOT EDIT.
// Source: weather_client.go
//
// Generated by this command:
//
//	mockgen -source=weather_client.go -destination=weather_mock.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	model "github.com/murilocarbol/cep-temp/application/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherClientInterface is a mock of WeatherClientInterface interface.
type MockWeatherClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherClientInterfaceMockRecorder
	isgomock struct{}
}

// MockWeatherClientInterfaceMockRecorder is the mock recorder for MockWeatherClientInterface.
type MockWeatherClientInterfaceMockRecorder struct {
	mock *MockWeatherClientInterface
}

// NewMockWeatherClientInterface creates a new mock instance.
func NewMockWeatherClientInterface(ctrl *gomock.Controller) *MockWeatherClientInterface {
	mock := &MockWeatherClientInterface{ctrl: ctrl}
	mock.recorder = &MockWeatherClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherClientInterface) EXPECT() *MockWeatherClientInterfaceMockRecorder {
	return m.recorder
}

// GetWeather mocks base method.
func (m *MockWeatherClientInterface) GetWeather(localitation string) (*model.Temperature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", localitation)
	ret0, _ := ret[0].(*model.Temperature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockWeatherClientInterfaceMockRecorder) GetWeather(localitation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherClientInterface)(nil).GetWeather), localitation)
}
