// Code generated by MockGen. DO NOT EDIT.
// Source: via_cep_client.go
//
// Generated by this command:
//
//	mockgen -source=via_cep_client.go -destination=via_cep_mock.go
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVipCepClientInterface is a mock of VipCepClientInterface interface.
type MockVipCepClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVipCepClientInterfaceMockRecorder
	isgomock struct{}
}

// MockVipCepClientInterfaceMockRecorder is the mock recorder for MockVipCepClientInterface.
type MockVipCepClientInterfaceMockRecorder struct {
	mock *MockVipCepClientInterface
}

// NewMockVipCepClientInterface creates a new mock instance.
func NewMockVipCepClientInterface(ctrl *gomock.Controller) *MockVipCepClientInterface {
	mock := &MockVipCepClientInterface{ctrl: ctrl}
	mock.recorder = &MockVipCepClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVipCepClientInterface) EXPECT() *MockVipCepClientInterfaceMockRecorder {
	return m.recorder
}

// GetEndereco mocks base method.
func (m *MockVipCepClientInterface) GetEndereco(cep string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndereco", cep)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndereco indicates an expected call of GetEndereco.
func (mr *MockVipCepClientInterfaceMockRecorder) GetEndereco(cep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndereco", reflect.TypeOf((*MockVipCepClientInterface)(nil).GetEndereco), cep)
}
